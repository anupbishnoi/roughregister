{
  "name": "apper",
  "description": "Convention-based restful app development in node.js",
  "version": "0.0.2",
  "author": {
    "name": "Anup Bishnoi",
    "email": "pixelsallover@gmail.com"
  },
  "dependencies": {
    "express": "~3.1.0"
  },
  "keywords": [
    "convention",
    "framework",
    "web",
    "rest",
    "restful",
    "router",
    "app",
    "api",
    "subapp",
    "mount"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/anupbishnoi/apper"
  },
  "main": "index",
  "scripts": {
    "prepublish": "npm prune",
    "test": "make test"
  },
  "engines": {
    "node": "*"
  },
  "readme": "apper\n=====\n\nPlug and play, convention based, restful app development in node.js\n\n\nInstall\n-------\n\n`npm install apper`\n\n\nUsage\n-----\n\n### server.js\n\n    var app = require(\"apper\")();\n\n    if (app.init()) {\n        app.start(8000);\n    }\n\nExample directory structure\n-------\n\n  - *root/*\n    - **server.js**: *shown above*\n    - **environment.js**\n    - **middleware.js**\n    - **routes.js**: GET /, GET /buddy\n\n    - *subapp1/*\n      - **routes.js**: GET /, POST /\n\n      - *subapp2/*\n        - > **middleware.js**\n        - > **routes.js**: GET /, GET /last\n\nRoutes exposed by the structure above\n------\n\n* GET  /\n* GET  /buddy\n\n* GET  /subapp1\n* POST /subapp1\n\n* GET  /subapp1/subapp2\n* GET  /subapp1/subapp2/last\n\n\nStructure of routes.js, environment.js, middleware.js\n---------\n\n### routes.js\n\n    module.exports = function (app, mountPath) {\n        app.get(\"/\", function (req, res, next) { res.send(\"hey\"); });\n    }\n\n### middleware.js\n\n    module.exports = function (app, mountPath) {\n        app.use(function (req, res, next) { next(); });\n    }\n\n### environment.js\n\n    module.exports = function (app, mountPath) {\n        app.set(\"property\", \"value\");\n    }\n\n\nAnd guess what\n---------\n\nEvery subapp is a complete node.js app unto itself.\n\nIt can have a package.json, its dependencies are respected,\nit can be pulled out and placed anywhere in the overall directory structure,\nor even used as a separated app (that's the whole point, actually).\n\nThe rest api is entirely based on the directory structure, on what app lies where.\n",
  "readmeFilename": "README.md",
  "_id": "apper@0.0.2",
  "_from": "apper@~0.0.1"
}
